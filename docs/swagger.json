{
    "swagger": "2.0",
    "info": {
        "description": "REST API для управления черничным сканером",
        "title": "ProjectB API",
        "contact": {
            "name": "Chernika Dev"
        },
        "version": "1.0"
    },
    "basePath": "/api",
    "paths": {
        "/api/auth": {
            "post": {
                "description": "Authenticates a user with username and password and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/finding": {
            "get": {
                "description": "Retrieves all findings associated with the provided target ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finding"
                ],
                "summary": "Get findings by target ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target ID",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Finding"
                            }
                        }
                    }
                }
            }
        },
        "/api/finding/all": {
            "get": {
                "description": "Retrieves a list of all available findings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finding"
                ],
                "summary": "Get all findings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Finding"
                            }
                        }
                    }
                }
            }
        },
        "/api/finding/new": {
            "post": {
                "description": "Creates a new finding with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Create a new finding",
                "parameters": [
                    {
                        "description": "Create Finding Request",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewFindingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Finding"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Creates a new user account with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request or user already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/scan": {
            "get": {
                "description": "Retrieves a scan by the provided scan ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Get a scan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Scan"
                        }
                    }
                }
            }
        },
        "/api/scan/all": {
            "get": {
                "description": "Retrieves a list of all available scans",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Get all scans",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Scan"
                            }
                        }
                    }
                }
            }
        },
        "/api/scan/delete": {
            "delete": {
                "description": "Deletes a scan by the provided scan ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Delete a scan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scan ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/scan/new": {
            "post": {
                "description": "Creates a new scan with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Create a new scan",
                "parameters": [
                    {
                        "description": "Create Scan Request",
                        "name": "scan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Scan"
                        }
                    }
                }
            }
        },
        "/api/scan/start": {
            "post": {
                "description": "Initiates a new scan with the provided scan ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Start a scan",
                "parameters": [
                    {
                        "description": "Start Scan Request",
                        "name": "scan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StartScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scan ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/scan/stop": {
            "post": {
                "description": "Stops an ongoing scan with the provided scan ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Stop a scan",
                "parameters": [
                    {
                        "description": "Stop Scan Request",
                        "name": "scan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StopScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scan ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/scan/update": {
            "patch": {
                "description": "Updates the details of an existing scan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Update a scan",
                "parameters": [
                    {
                        "description": "Update Scan Request",
                        "name": "scan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Scan"
                        }
                    }
                }
            }
        },
        "/api/target": {
            "get": {
                "description": "Retrieves a target by the provided target ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Get a target",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Target"
                        }
                    }
                }
            }
        },
        "/api/target/all": {
            "get": {
                "description": "Retrieves a list of all available targets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Get all targets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Target"
                            }
                        }
                    }
                }
            }
        },
        "/api/target/delete": {
            "delete": {
                "description": "Deletes a target by the provided target ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Delete a target",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Target ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/target/new": {
            "post": {
                "description": "Creates a new target with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Create a new target",
                "parameters": [
                    {
                        "description": "Create Target Request",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Target"
                        }
                    }
                }
            }
        },
        "/api/target/update": {
            "patch": {
                "description": "Updates the details of an existing target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "target"
                ],
                "summary": "Update a target",
                "parameters": [
                    {
                        "description": "Update Target Request",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Target"
                        }
                    }
                }
            }
        },
        "/api/task/confirm": {
            "post": {
                "description": "Marks a task as completed and removes it from the queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Confirm task completion",
                "parameters": [
                    {
                        "description": "Task confirmation data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ConfirmTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/task/queue": {
            "get": {
                "description": "Retrieves the oldest task in queue for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Get next task",
                "responses": {
                    "200": {
                        "description": "Task details",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.About": {
            "description": "Describes the nature and context of the discovered issue",
            "type": "object",
            "properties": {
                "description": {
                    "description": "description is a human-readable explanation of the discovered issue",
                    "type": "string"
                },
                "position": {
                    "description": "position describes the location or component in which the issue was found",
                    "type": "string"
                },
                "severity": {
                    "description": "severity indicates the level of seriousness of the finding (e.g., low, medium, high)",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates the category or type of the discovered issue",
                    "type": "string"
                }
            }
        },
        "dto.AuthRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.ConfirmTaskRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.CreateScanRequest": {
            "description": "Holds the Scan object to be created",
            "type": "object",
            "properties": {
                "scan": {
                    "description": "scan holds the details of the new scan",
                    "allOf": [
                        {
                            "$ref": "#/definitions/storage.Scan"
                        }
                    ]
                }
            }
        },
        "dto.CreateTargetRequest": {
            "description": "Holds the Target object to be created",
            "type": "object",
            "properties": {
                "target": {
                    "description": "target holds the details of the new target",
                    "allOf": [
                        {
                            "$ref": "#/definitions/storage.Target"
                        }
                    ]
                }
            }
        },
        "dto.Details": {
            "description": "Combines injection point and interaction details for a finding",
            "type": "object",
            "properties": {
                "injection-point": {
                    "description": "injection-point holds payload and matched pattern data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionPoint"
                        }
                    ]
                },
                "interaction": {
                    "description": "interaction holds request and response data for the identified issue",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.Interaction"
                        }
                    ]
                }
            }
        },
        "dto.Finding": {
            "description": "Contains information about a discovered vulnerability or issue",
            "type": "object",
            "properties": {
                "about": {
                    "description": "about provides general info about the finding",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.About"
                        }
                    ]
                },
                "details": {
                    "description": "details contains specific technical data about the finding",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.Details"
                        }
                    ]
                },
                "scan_id": {
                    "description": "scan_id is the unique identifier of the scan during which the finding was discovered",
                    "type": "string"
                },
                "target_id": {
                    "description": "target_id is the unique identifier of the target where the finding was discovered",
                    "type": "string"
                }
            }
        },
        "dto.InjectionPoint": {
            "description": "Provides payload and matched pattern details for injection-based findings",
            "type": "object",
            "properties": {
                "matched": {
                    "description": "matched is the string or pattern that was detected or matched in the response",
                    "type": "string"
                },
                "payload": {
                    "description": "payload is the data used during the injection test",
                    "type": "string"
                }
            }
        },
        "dto.Interaction": {
            "description": "Captures the HTTP interaction details for the finding",
            "type": "object",
            "properties": {
                "request": {
                    "description": "request is the raw HTTP request data",
                    "type": "string"
                },
                "response": {
                    "description": "response is the raw HTTP response data",
                    "type": "string"
                }
            }
        },
        "dto.NewFindingRequest": {
            "description": "Holds the Finding object to be created",
            "type": "object",
            "properties": {
                "finding": {
                    "$ref": "#/definitions/dto.Finding"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.ScanExtended": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the timestamp when the scan was created",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique identifier of the scan",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode specifies the scan mode",
                    "type": "string"
                },
                "module": {
                    "description": "Module describes the current scanning module in use",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the current state of the scan (e.g., created, paused, running, failed, finished)",
                    "type": "string"
                },
                "targets": {
                    "description": "Targets is the list of targets to be scanned",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.Target"
                    }
                }
            }
        },
        "dto.StartScanRequest": {
            "description": "Contains the scan ID that needs to be started",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "id is the UUID of the scan to start",
                    "type": "string"
                }
            }
        },
        "dto.StopScanRequest": {
            "description": "Contains the scan ID that needs to be stopped",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "id is the UUID of the scan to stop",
                    "type": "string"
                }
            }
        },
        "dto.TaskResponse": {
            "type": "object",
            "properties": {
                "scan": {
                    "$ref": "#/definitions/dto.ScanExtended"
                },
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "dto.UpdateScanRequest": {
            "description": "Holds the updated Scan object",
            "type": "object",
            "properties": {
                "scan": {
                    "description": "scan contains the modified scan details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/storage.Scan"
                        }
                    ]
                }
            }
        },
        "dto.UpdateTargetRequest": {
            "description": "Holds the updated Target object",
            "type": "object",
            "properties": {
                "target": {
                    "description": "target contains the modified target details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/storage.Target"
                        }
                    ]
                }
            }
        },
        "storage.Finding": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "scanID": {
                    "type": "string"
                },
                "targetID": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "storage.Scan": {
            "description": "Contains details about a specific scan, including its targets and status",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "created_at is the timestamp when the scan was created",
                    "type": "string"
                },
                "id": {
                    "description": "id is the unique identifier of the scan",
                    "type": "string"
                },
                "mode": {
                    "description": "mode specifies the scan mode",
                    "type": "string"
                },
                "module": {
                    "description": "module describes the current scanning module in use",
                    "type": "string"
                },
                "status": {
                    "description": "status indicates the current state of the scan (e.g., created, paused, running, failed, finished)",
                    "type": "string"
                },
                "targets": {
                    "description": "targets is the list of target IDs to be scanned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "storage.Target": {
            "description": "Contains details about a specific target, including URI and description",
            "type": "object",
            "properties": {
                "ad_password": {
                    "description": "ADPassword Active directory password if known, used for internal scans",
                    "type": "string"
                },
                "ad_username": {
                    "description": "ADUsername Active directory username if known, used for internal scans",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt indicates when the target was first registered",
                    "type": "string"
                },
                "description": {
                    "description": "Description provides additional information about the target",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique identifier of the target",
                    "type": "string"
                },
                "uri": {
                    "description": "Uri is the resource to be scanned",
                    "type": "string"
                }
            }
        },
        "storage.Task": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "scan_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}